package com.educativo.bot.modelos;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * CONCEPTO: ENCAPSULAMIENTO Y COMPOSICI√ìN
 * 
 * Esta clase representa una materia acad√©mica que puede contener m√∫ltiples tareas.
 * Demuestra:
 * 1. Encapsulamiento - atributos privados con m√©todos de acceso controlado
 * 2. Composici√≥n - una materia "tiene" una lista de tareas
 * 3. Validaci√≥n de datos en m√©todos setter
 * 4. M√©todos utilitarios para obtener informaci√≥n procesada
 */
public class Materia {
    
    // ENCAPSULAMIENTO: Atributos privados
    private String id;                      // Identificador √∫nico de la materia
    private String nombre;                  // Nombre de la materia
    private String descripcion;             // Descripci√≥n de la materia
    private String codigo;                  // C√≥digo de la materia (ej: "MAT101")
    private String profesor;                // Nombre del profesor
    private LocalDateTime fechaCreacion;    // Cu√°ndo se cre√≥ la materia
    private String creadorId;               // ID del usuario que cre√≥ la materia
    private List<String> tareasIds;         // IDs de las tareas asociadas (composici√≥n)
    private String color;                   // Color para identificar la materia
    private boolean activa;                 // Si la materia est√° activa o archivada
    
    /**
     * Constructor principal de la clase Materia
     * 
     * @param id Identificador √∫nico
     * @param nombre Nombre de la materia
     * @param codigo C√≥digo de la materia
     * @param descripcion Descripci√≥n
     * @param profesor Nombre del profesor
     * @param creadorId ID del usuario creador
     */
    public Materia(String id, String nombre, String codigo, String descripcion, 
                   String profesor, String creadorId) {
        // Validaci√≥n de entrada
        if (nombre == null || nombre.trim().isEmpty()) {
            throw new IllegalArgumentException("El nombre de la materia no puede estar vac√≠o");
        }
        if (codigo == null || codigo.trim().isEmpty()) {
            throw new IllegalArgumentException("El c√≥digo de la materia no puede estar vac√≠o");
        }
        
        // Inicializaci√≥n de atributos
        this.id = id;
        this.nombre = nombre.trim();
        this.codigo = codigo.trim().toUpperCase();
        this.descripcion = descripcion != null ? descripcion.trim() : "";
        this.profesor = profesor != null ? profesor.trim() : "Sin asignar";
        this.creadorId = creadorId;
        this.fechaCreacion = LocalDateTime.now();
        this.tareasIds = new ArrayList<>();
        this.color = generarColorAleatorio();
        this.activa = true;
    }
    
    /**
     * Constructor simplificado
     * 
     * @param id Identificador √∫nico
     * @param nombre Nombre de la materia
     * @param codigo C√≥digo de la materia
     * @param creadorId ID del usuario creador
     */
    public Materia(String id, String nombre, String codigo, String creadorId) {
        this(id, nombre, codigo, null, null, creadorId);
    }
    
    // M√âTODOS GETTER - Acceso controlado de lectura
    
    public String getId() {
        return id;
    }
    
    public String getNombre() {
        return nombre;
    }
    
    public String getDescripcion() {
        return descripcion;
    }
    
    public String getCodigo() {
        return codigo;
    }
    
    public String getProfesor() {
        return profesor;
    }
    
    public LocalDateTime getFechaCreacion() {
        return fechaCreacion;
    }
    
    public String getCreadorId() {
        return creadorId;
    }
    
    public List<String> getTareasIds() {
        return new ArrayList<>(tareasIds); // Devolvemos una copia para mantener encapsulamiento
    }
    
    public String getColor() {
        return color;
    }
    
    public boolean isActiva() {
        return activa;
    }
    
    // M√âTODOS SETTER - Acceso controlado de escritura con validaci√≥n
    
    public void setNombre(String nombre) {
        if (nombre == null || nombre.trim().isEmpty()) {
            throw new IllegalArgumentException("El nombre no puede estar vac√≠o");
        }
        this.nombre = nombre.trim();
    }
    
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion != null ? descripcion.trim() : "";
    }
    
    public void setCodigo(String codigo) {
        if (codigo == null || codigo.trim().isEmpty()) {
            throw new IllegalArgumentException("El c√≥digo no puede estar vac√≠o");
        }
        this.codigo = codigo.trim().toUpperCase();
    }
    
    public void setProfesor(String profesor) {
        this.profesor = profesor != null ? profesor.trim() : "Sin asignar";
    }
    
    public void setColor(String color) {
        this.color = color;
    }
    
    public void setActiva(boolean activa) {
        this.activa = activa;
    }
    
    // M√âTODOS DE GESTI√ìN DE TAREAS - Demuestran composici√≥n
    
    /**
     * Agrega una tarea a la materia
     * 
     * @param tareaId ID de la tarea a agregar
     */
    public void agregarTarea(String tareaId) {
        if (tareaId != null && !tareasIds.contains(tareaId)) {
            tareasIds.add(tareaId);
        }
    }
    
    /**
     * Elimina una tarea de la materia
     * 
     * @param tareaId ID de la tarea a eliminar
     * @return true si se elimin√≥, false si no exist√≠a
     */
    public boolean eliminarTarea(String tareaId) {
        return tareasIds.remove(tareaId);
    }
    
    /**
     * Verifica si la materia contiene una tarea espec√≠fica
     * 
     * @param tareaId ID de la tarea a verificar
     * @return true si contiene la tarea
     */
    public boolean tieneTarea(String tareaId) {
        return tareasIds.contains(tareaId);
    }
    
    /**
     * Obtiene el n√∫mero de tareas asociadas
     * 
     * @return Cantidad de tareas
     */
    public int getCantidadTareas() {
        return tareasIds.size();
    }
    
    // M√âTODOS UTILITARIOS
    
    /**
     * Genera un color aleatorio para la materia
     * 
     * @return C√≥digo de color en hexadecimal
     */
    private String generarColorAleatorio() {
        String[] colores = {
            "#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7",
            "#DDA0DD", "#98D8C8", "#F7DC6F", "#BB8FCE", "#85C1E9"
        };
        return colores[(int) (Math.random() * colores.length)];
    }
    
    /**
     * Obtiene el nombre completo de la materia (c√≥digo + nombre)
     * 
     * @return Formato "C√ìDIGO - Nombre"
     */
    public String getNombreCompleto() {
        return codigo + " - " + nombre;
    }
    
    /**
     * Obtiene informaci√≥n resumida de la materia
     * 
     * @return String con informaci√≥n b√°sica
     */
    public String getResumen() {
        StringBuilder resumen = new StringBuilder();
        resumen.append("üìö **").append(getNombreCompleto()).append("**\n");
        
        if (!descripcion.isEmpty()) {
            resumen.append("üìù ").append(descripcion).append("\n");
        }
        
        if (!profesor.equals("Sin asignar")) {
            resumen.append("üë®‚Äçüè´ Profesor: ").append(profesor).append("\n");
        }
        
        resumen.append("üìä Tareas: ").append(getCantidadTareas());
        resumen.append(" | Estado: ").append(activa ? "Activa" : "Archivada");
        
        return resumen.toString();
    }
    
    /**
     * Obtiene informaci√≥n detallada de la materia
     * 
     * @return String con informaci√≥n completa
     */
    public String getInformacionDetallada() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        StringBuilder info = new StringBuilder();
        
        info.append("üìö **").append(getNombreCompleto()).append("**\n\n");
        
        if (!descripcion.isEmpty()) {
            info.append("üìù **Descripci√≥n:**\n").append(descripcion).append("\n\n");
        }
        
        info.append("üë®‚Äçüè´ **Profesor:** ").append(profesor).append("\n");
        info.append("üìÖ **Creada:** ").append(fechaCreacion.format(formatter)).append("\n");
        info.append("üìä **Tareas asociadas:** ").append(getCantidadTareas()).append("\n");
        info.append("üé® **Color:** ").append(color).append("\n");
        info.append("üìã **Estado:** ").append(activa ? "‚úÖ Activa" : "üì¶ Archivada").append("\n");
        
        return info.toString();
    }
    
    /**
     * Representa la materia como string
     * Sobrescribe el m√©todo toString() (herencia impl√≠cita de Object)
     * 
     * @return Representaci√≥n en string
     */
    @Override
    public String toString() {
        return getResumen();
    }
    
    /**
     * Compara si dos materias son iguales bas√°ndose en su ID
     * Sobrescribe el m√©todo equals() (herencia impl√≠cita de Object)
     * 
     * @param obj Objeto a comparar
     * @return true si son iguales
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        Materia materia = (Materia) obj;
        return id != null ? id.equals(materia.id) : materia.id == null;
    }
    
    /**
     * Genera hash code basado en el ID
     * Sobrescribe el m√©todo hashCode() (herencia impl√≠cita de Object)
     * 
     * @return Hash code
     */
    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}
